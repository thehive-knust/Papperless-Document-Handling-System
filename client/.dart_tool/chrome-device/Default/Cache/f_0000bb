define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/material/constants.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/foundation/change_notifier.dart'], (function load__packages__flutter__src__material__toggleable_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__material__constants$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__foundation__change_notifier$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const actions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__actions;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const constants = packages__flutter__src__material__constants$46dart.src__material__constants;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  var toggleable = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    CallbackActionOfActivateIntent: () => (T.CallbackActionOfActivateIntent = dart.constFn(actions.CallbackAction$(actions.ActivateIntent)))(),
    ActionOfIntent: () => (T.ActionOfIntent = dart.constFn(actions.Action$(actions.Intent)))(),
    LinkedMapOfType$ActionOfIntent: () => (T.LinkedMapOfType$ActionOfIntent = dart.constFn(_js_helper.LinkedMap$(core.Type, T.ActionOfIntent())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: semantics_event.TapSemanticEvent.prototype,
        [SemanticsEvent_type]: "tap"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 13,
        [_Location_line]: 325,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 326,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], T._LocationL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 324,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 11,
        [_Location_line]: 323,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 324,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8], T._LocationL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 322,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "excludeFromSemantics",
        [_Location_column]: 9,
        [_Location_line]: 317,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapDown",
        [_Location_column]: 9,
        [_Location_line]: 318,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 9,
        [_Location_line]: 319,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 9,
        [_Location_line]: 320,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapCancel",
        [_Location_column]: 9,
        [_Location_line]: 321,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 322,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16], T._LocationL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 316,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "actions",
        [_Location_column]: 7,
        [_Location_line]: 309,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 310,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 311,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 7,
        [_Location_line]: 312,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowFocusHighlight",
        [_Location_column]: 7,
        [_Location_line]: 313,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onShowHoverHighlight",
        [_Location_column]: 7,
        [_Location_line]: 314,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 7,
        [_Location_line]: 315,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 316,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], T._LocationL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[18] || CT.C18,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 308,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    }
  }, false);
  var C = Array(30).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart",
    "package:flutter/src/material/toggleable.dart"
  ];
  var __ToggleableStateMixin__positionController = dart.privateName(toggleable, "_#ToggleableStateMixin#_positionController");
  var __ToggleableStateMixin__positionController_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_positionController#isSet");
  var __ToggleableStateMixin__position = dart.privateName(toggleable, "_#ToggleableStateMixin#_position");
  var __ToggleableStateMixin__position_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_position#isSet");
  var __ToggleableStateMixin__reactionController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionController");
  var __ToggleableStateMixin__reactionController_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionController#isSet");
  var __ToggleableStateMixin__reaction = dart.privateName(toggleable, "_#ToggleableStateMixin#_reaction");
  var __ToggleableStateMixin__reaction_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reaction#isSet");
  var __ToggleableStateMixin__reactionHoverFade = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFade");
  var __ToggleableStateMixin__reactionHoverFade_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFade#isSet");
  var __ToggleableStateMixin__reactionHoverFadeController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFadeController");
  var __ToggleableStateMixin__reactionHoverFadeController_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionHoverFadeController#isSet");
  var __ToggleableStateMixin__reactionFocusFade = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFade");
  var __ToggleableStateMixin__reactionFocusFade_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFade#isSet");
  var __ToggleableStateMixin__reactionFocusFadeController = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFadeController");
  var __ToggleableStateMixin__reactionFocusFadeController_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_reactionFocusFadeController#isSet");
  var __ToggleableStateMixin__actionMap = dart.privateName(toggleable, "_#ToggleableStateMixin#_actionMap");
  var __ToggleableStateMixin__actionMap_isSet = dart.privateName(toggleable, "_#ToggleableStateMixin#_actionMap#isSet");
  var _downPosition = dart.privateName(toggleable, "_downPosition");
  var _focused = dart.privateName(toggleable, "_focused");
  var _hovering = dart.privateName(toggleable, "_hovering");
  var _positionController = dart.privateName(toggleable, "_positionController");
  var _position = dart.privateName(toggleable, "_position");
  var _reactionController = dart.privateName(toggleable, "_reactionController");
  var _reaction = dart.privateName(toggleable, "_reaction");
  var _reactionHoverFade = dart.privateName(toggleable, "_reactionHoverFade");
  var _reactionHoverFadeController = dart.privateName(toggleable, "_reactionHoverFadeController");
  var _reactionFocusFade = dart.privateName(toggleable, "_reactionFocusFade");
  var _reactionFocusFadeController = dart.privateName(toggleable, "_reactionFocusFadeController");
  var _handleTap = dart.privateName(toggleable, "_handleTap");
  var _actionMap = dart.privateName(toggleable, "_actionMap");
  var _handleTapDown = dart.privateName(toggleable, "_handleTapDown");
  var SemanticsEvent_type = dart.privateName(semantics_event, "SemanticsEvent.type");
  var _handleTapEnd = dart.privateName(toggleable, "_handleTapEnd");
  var _handleFocusHighlightChanged = dart.privateName(toggleable, "_handleFocusHighlightChanged");
  var _handleHoverChanged = dart.privateName(toggleable, "_handleHoverChanged");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const _is_ToggleableStateMixin_default = Symbol('_is_ToggleableStateMixin_default');
  toggleable.ToggleableStateMixin$ = dart.generic(S => {
    class ToggleableStateMixin extends ticker_provider.TickerProviderStateMixin$(S) {}
    ToggleableStateMixin[dart.mixinOn] = TickerProviderStateMixin => class ToggleableStateMixin extends TickerProviderStateMixin {
      get positionController() {
        return this[_positionController];
      }
      get [_positionController]() {
        let t0;
        return dart.test(this[__ToggleableStateMixin__positionController_isSet]) ? (t0 = this[__ToggleableStateMixin__positionController], t0) : dart.throw(new _internal.LateError.fieldNI("_positionController"));
      }
      set [_positionController](t0) {
        if (t0 == null) dart.nullFailed(I[0], 40, 28, "null");
        this[__ToggleableStateMixin__positionController_isSet] = true;
        this[__ToggleableStateMixin__positionController] = t0;
      }
      get position() {
        return this[_position];
      }
      get [_position]() {
        let t1;
        return dart.test(this[__ToggleableStateMixin__position_isSet]) ? (t1 = this[__ToggleableStateMixin__position], t1) : dart.throw(new _internal.LateError.fieldNI("_position"));
      }
      set [_position](t1) {
        if (t1 == null) dart.nullFailed(I[0], 51, 24, "null");
        this[__ToggleableStateMixin__position_isSet] = true;
        this[__ToggleableStateMixin__position] = t1;
      }
      get reactionController() {
        return this[_reactionController];
      }
      get [_reactionController]() {
        let t2;
        return dart.test(this[__ToggleableStateMixin__reactionController_isSet]) ? (t2 = this[__ToggleableStateMixin__reactionController], t2) : dart.throw(new _internal.LateError.fieldNI("_reactionController"));
      }
      set [_reactionController](t2) {
        if (t2 == null) dart.nullFailed(I[0], 61, 28, "null");
        this[__ToggleableStateMixin__reactionController_isSet] = true;
        this[__ToggleableStateMixin__reactionController] = t2;
      }
      get reaction() {
        return this[_reaction];
      }
      get [_reaction]() {
        let t3;
        return dart.test(this[__ToggleableStateMixin__reaction_isSet]) ? (t3 = this[__ToggleableStateMixin__reaction], t3) : dart.throw(new _internal.LateError.fieldNI("_reaction"));
      }
      set [_reaction](t3) {
        if (t3 == null) dart.nullFailed(I[0], 71, 26, "null");
        this[__ToggleableStateMixin__reaction_isSet] = true;
        this[__ToggleableStateMixin__reaction] = t3;
      }
      get reactionHoverFade() {
        return this[_reactionHoverFade];
      }
      get [_reactionHoverFade]() {
        let t4;
        return dart.test(this[__ToggleableStateMixin__reactionHoverFade_isSet]) ? (t4 = this[__ToggleableStateMixin__reactionHoverFade], t4) : dart.throw(new _internal.LateError.fieldNI("_reactionHoverFade"));
      }
      set [_reactionHoverFade](t4) {
        if (t4 == null) dart.nullFailed(I[0], 82, 26, "null");
        this[__ToggleableStateMixin__reactionHoverFade_isSet] = true;
        this[__ToggleableStateMixin__reactionHoverFade] = t4;
      }
      get [_reactionHoverFadeController]() {
        let t5;
        return dart.test(this[__ToggleableStateMixin__reactionHoverFadeController_isSet]) ? (t5 = this[__ToggleableStateMixin__reactionHoverFadeController], t5) : dart.throw(new _internal.LateError.fieldNI("_reactionHoverFadeController"));
      }
      set [_reactionHoverFadeController](t5) {
        if (t5 == null) dart.nullFailed(I[0], 83, 28, "null");
        this[__ToggleableStateMixin__reactionHoverFadeController_isSet] = true;
        this[__ToggleableStateMixin__reactionHoverFadeController] = t5;
      }
      get reactionFocusFade() {
        return this[_reactionFocusFade];
      }
      get [_reactionFocusFade]() {
        let t6;
        return dart.test(this[__ToggleableStateMixin__reactionFocusFade_isSet]) ? (t6 = this[__ToggleableStateMixin__reactionFocusFade], t6) : dart.throw(new _internal.LateError.fieldNI("_reactionFocusFade"));
      }
      set [_reactionFocusFade](t6) {
        if (t6 == null) dart.nullFailed(I[0], 93, 26, "null");
        this[__ToggleableStateMixin__reactionFocusFade_isSet] = true;
        this[__ToggleableStateMixin__reactionFocusFade] = t6;
      }
      get [_reactionFocusFadeController]() {
        let t7;
        return dart.test(this[__ToggleableStateMixin__reactionFocusFadeController_isSet]) ? (t7 = this[__ToggleableStateMixin__reactionFocusFadeController], t7) : dart.throw(new _internal.LateError.fieldNI("_reactionFocusFadeController"));
      }
      set [_reactionFocusFadeController](t7) {
        if (t7 == null) dart.nullFailed(I[0], 94, 28, "null");
        this[__ToggleableStateMixin__reactionFocusFadeController_isSet] = true;
        this[__ToggleableStateMixin__reactionFocusFadeController] = t7;
      }
      get isInteractive() {
        return this.onChanged != null;
      }
      get [_actionMap]() {
        let t9;
        if (!dart.test(this[__ToggleableStateMixin__actionMap_isSet])) {
          let t8 = new (T.LinkedMapOfType$ActionOfIntent()).from([dart.wrapType(actions.ActivateIntent), new (T.CallbackActionOfActivateIntent()).new({onInvoke: dart.bind(this, _handleTap)})]);
          if (dart.test(this[__ToggleableStateMixin__actionMap_isSet])) dart.throw(new _internal.LateError.fieldADI("_actionMap"));
          this[__ToggleableStateMixin__actionMap] = t8;
          this[__ToggleableStateMixin__actionMap_isSet] = true;
        }
        t9 = this[__ToggleableStateMixin__actionMap];
        return t9;
      }
      initState() {
        super.initState();
        this[_positionController] = new animation_controller.AnimationController.new({duration: toggleable._kToggleDuration, value: this.value === false ? 0.0 : 1.0, vsync: this});
        this[_position] = new animations.CurvedAnimation.new({parent: this[_positionController], curve: curves.Curves.easeIn, reverseCurve: curves.Curves.easeOut});
        this[_reactionController] = new animation_controller.AnimationController.new({duration: constants.kRadialReactionDuration, vsync: this});
        this[_reaction] = new animations.CurvedAnimation.new({parent: this[_reactionController], curve: curves.Curves.fastOutSlowIn});
        this[_reactionHoverFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: dart.test(this[_hovering]) || dart.test(this[_focused]) ? 1.0 : 0.0, vsync: this});
        this[_reactionHoverFade] = new animations.CurvedAnimation.new({parent: this[_reactionHoverFadeController], curve: curves.Curves.fastOutSlowIn});
        this[_reactionFocusFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: dart.test(this[_hovering]) || dart.test(this[_focused]) ? 1.0 : 0.0, vsync: this});
        this[_reactionFocusFade] = new animations.CurvedAnimation.new({parent: this[_reactionFocusFadeController], curve: curves.Curves.fastOutSlowIn});
      }
      animateToValue() {
        if (dart.test(this.tristate)) {
          if (this.value == null) this[_positionController].value = 0.0;
          if (this.value !== false)
            this[_positionController].forward();
          else
            this[_positionController].reverse();
        } else {
          if (this.value === true)
            this[_positionController].forward();
          else
            this[_positionController].reverse();
        }
      }
      dispose() {
        this[_positionController].dispose();
        this[_reactionController].dispose();
        this[_reactionHoverFadeController].dispose();
        this[_reactionFocusFadeController].dispose();
        super.dispose();
      }
      get downPosition() {
        return this[_downPosition];
      }
      [_handleTapDown](details) {
        if (details == null) dart.nullFailed(I[0], 215, 38, "details");
        if (dart.test(this.isInteractive)) {
          this.setState(dart.fn(() => {
            this[_downPosition] = details.localPosition;
          }, T.VoidTovoid()));
          this[_reactionController].forward();
        }
      }
      [_handleTap](_ = null) {
        if (!dart.test(this.isInteractive)) return;
        switch (this.value) {
          case false:
          {
            dart.nullCheck(this.onChanged)(true);
            break;
          }
          case true:
          {
            dart.nullCheck(this.onChanged)(dart.test(this.tristate) ? null : false);
            break;
          }
          case null:
          {
            dart.nullCheck(this.onChanged)(false);
            break;
          }
        }
        dart.nullCheck(this.context.findRenderObject()).sendSemanticsEvent(C[0] || CT.C0);
      }
      [_handleTapEnd](_ = null) {
        if (this[_downPosition] != null) {
          this.setState(dart.fn(() => {
            this[_downPosition] = null;
          }, T.VoidTovoid()));
        }
        this[_reactionController].reverse();
      }
      [_handleFocusHighlightChanged](focused) {
        if (focused == null) dart.nullFailed(I[0], 249, 42, "focused");
        if (focused != this[_focused]) {
          this.setState(dart.fn(() => {
            this[_focused] = focused;
          }, T.VoidTovoid()));
          if (dart.test(focused)) {
            this[_reactionFocusFadeController].forward();
          } else {
            this[_reactionFocusFadeController].reverse();
          }
        }
      }
      [_handleHoverChanged](hovering) {
        if (hovering == null) dart.nullFailed(I[0], 261, 33, "hovering");
        if (hovering != this[_hovering]) {
          this.setState(dart.fn(() => {
            this[_hovering] = hovering;
          }, T.VoidTovoid()));
          if (dart.test(hovering)) {
            this[_reactionHoverFadeController].forward();
          } else {
            this[_reactionHoverFadeController].reverse();
          }
        }
      }
      get states() {
        return (() => {
          let t9 = T.LinkedHashSetOfMaterialState().new();
          if (!dart.test(this.isInteractive)) t9.add(material_state.MaterialState.disabled);
          if (dart.test(this[_hovering])) t9.add(material_state.MaterialState.hovered);
          if (dart.test(this[_focused])) t9.add(material_state.MaterialState.focused);
          if (this.value !== false) t9.add(material_state.MaterialState.selected);
          return t9;
        })();
      }
      buildToggleable(opts) {
        let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
        let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
        if (autofocus == null) dart.nullFailed(I[0], 303, 10, "autofocus");
        let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
        if (mouseCursor == null) dart.nullFailed(I[0], 304, 49, "mouseCursor");
        let size = opts && 'size' in opts ? opts.size : null;
        if (size == null) dart.nullFailed(I[0], 305, 19, "size");
        let painter = opts && 'painter' in opts ? opts.painter : null;
        if (painter == null) dart.nullFailed(I[0], 306, 28, "painter");
        return new actions.FocusableActionDetector.new({actions: this[_actionMap], focusNode: focusNode, autofocus: autofocus, enabled: this.isInteractive, onShowFocusHighlight: dart.bind(this, _handleFocusHighlightChanged), onShowHoverHighlight: dart.bind(this, _handleHoverChanged), mouseCursor: mouseCursor.resolve(this.states), child: new gesture_detector.GestureDetector.new({excludeFromSemantics: !dart.test(this.isInteractive), onTapDown: dart.bind(this, _handleTapDown), onTap: dart.bind(this, _handleTap), onTapUp: dart.bind(this, _handleTapEnd), onTapCancel: dart.bind(this, _handleTapEnd), child: new basic.Semantics.new({enabled: this.isInteractive, child: new basic.CustomPaint.new({size: size, painter: painter, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1}), $creationLocationd_0dea112b090073317d4: C[5] || CT.C5}), $creationLocationd_0dea112b090073317d4: C[9] || CT.C9}), $creationLocationd_0dea112b090073317d4: C[17] || CT.C17});
      }
    };
    (ToggleableStateMixin[dart.mixinNew] = function() {
      this[__ToggleableStateMixin__positionController] = null;
      this[__ToggleableStateMixin__positionController_isSet] = false;
      this[__ToggleableStateMixin__position] = null;
      this[__ToggleableStateMixin__position_isSet] = false;
      this[__ToggleableStateMixin__reactionController] = null;
      this[__ToggleableStateMixin__reactionController_isSet] = false;
      this[__ToggleableStateMixin__reaction] = null;
      this[__ToggleableStateMixin__reaction_isSet] = false;
      this[__ToggleableStateMixin__reactionHoverFade] = null;
      this[__ToggleableStateMixin__reactionHoverFade_isSet] = false;
      this[__ToggleableStateMixin__reactionHoverFadeController] = null;
      this[__ToggleableStateMixin__reactionHoverFadeController_isSet] = false;
      this[__ToggleableStateMixin__reactionFocusFade] = null;
      this[__ToggleableStateMixin__reactionFocusFade_isSet] = false;
      this[__ToggleableStateMixin__reactionFocusFadeController] = null;
      this[__ToggleableStateMixin__reactionFocusFadeController_isSet] = false;
      this[__ToggleableStateMixin__actionMap] = null;
      this[__ToggleableStateMixin__actionMap_isSet] = false;
      this[_downPosition] = null;
      this[_focused] = false;
      this[_hovering] = false;
    }).prototype = ToggleableStateMixin.prototype;
    dart.addTypeTests(ToggleableStateMixin);
    ToggleableStateMixin.prototype[_is_ToggleableStateMixin_default] = true;
    dart.addTypeCaches(ToggleableStateMixin);
    ToggleableStateMixin[dart.implements] = () => [ticker_provider.TickerProviderStateMixin$(S)];
    dart.setMethodSignature(ToggleableStateMixin, () => ({
      __proto__: dart.getMethods(ToggleableStateMixin.__proto__),
      animateToValue: dart.fnType(dart.void, []),
      [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
      [_handleTap]: dart.fnType(dart.void, [], [dart.nullable(actions.Intent)]),
      [_handleTapEnd]: dart.fnType(dart.void, [], [dart.nullable(tap.TapUpDetails)]),
      [_handleFocusHighlightChanged]: dart.fnType(dart.void, [core.bool]),
      [_handleHoverChanged]: dart.fnType(dart.void, [core.bool]),
      buildToggleable: dart.fnType(framework.Widget, [], {autofocus: core.bool, focusNode: dart.nullable(focus_manager.FocusNode)}, {mouseCursor: material_state.MaterialStateProperty$(mouse_cursor.MouseCursor), painter: custom_paint.CustomPainter, size: ui.Size})
    }));
    dart.setGetterSignature(ToggleableStateMixin, () => ({
      __proto__: dart.getGetters(ToggleableStateMixin.__proto__),
      positionController: animation_controller.AnimationController,
      [_positionController]: animation_controller.AnimationController,
      position: animations.CurvedAnimation,
      [_position]: animations.CurvedAnimation,
      reactionController: animation_controller.AnimationController,
      [_reactionController]: animation_controller.AnimationController,
      reaction: animation.Animation$(core.double),
      [_reaction]: animation.Animation$(core.double),
      reactionHoverFade: animation.Animation$(core.double),
      [_reactionHoverFade]: animation.Animation$(core.double),
      [_reactionHoverFadeController]: animation_controller.AnimationController,
      reactionFocusFade: animation.Animation$(core.double),
      [_reactionFocusFade]: animation.Animation$(core.double),
      [_reactionFocusFadeController]: animation_controller.AnimationController,
      isInteractive: core.bool,
      [_actionMap]: core.Map$(core.Type, actions.Action$(actions.Intent)),
      downPosition: dart.nullable(ui.Offset),
      states: core.Set$(material_state.MaterialState)
    }));
    dart.setSetterSignature(ToggleableStateMixin, () => ({
      __proto__: dart.getSetters(ToggleableStateMixin.__proto__),
      [_positionController]: animation_controller.AnimationController,
      [_position]: animations.CurvedAnimation,
      [_reactionController]: animation_controller.AnimationController,
      [_reaction]: animation.Animation$(core.double),
      [_reactionHoverFade]: animation.Animation$(core.double),
      [_reactionHoverFadeController]: animation_controller.AnimationController,
      [_reactionFocusFade]: animation.Animation$(core.double),
      [_reactionFocusFadeController]: animation_controller.AnimationController
    }));
    dart.setLibraryUri(ToggleableStateMixin, I[1]);
    dart.setFieldSignature(ToggleableStateMixin, () => ({
      __proto__: dart.getFields(ToggleableStateMixin.__proto__),
      [__ToggleableStateMixin__positionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [__ToggleableStateMixin__positionController_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__position]: dart.fieldType(dart.nullable(animations.CurvedAnimation)),
      [__ToggleableStateMixin__position_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reactionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [__ToggleableStateMixin__reactionController_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reaction]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
      [__ToggleableStateMixin__reaction_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reactionHoverFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
      [__ToggleableStateMixin__reactionHoverFade_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reactionHoverFadeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [__ToggleableStateMixin__reactionHoverFadeController_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reactionFocusFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
      [__ToggleableStateMixin__reactionFocusFade_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__reactionFocusFadeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [__ToggleableStateMixin__reactionFocusFadeController_isSet]: dart.fieldType(core.bool),
      [__ToggleableStateMixin__actionMap]: dart.fieldType(dart.nullable(core.Map$(core.Type, actions.Action$(actions.Intent)))),
      [__ToggleableStateMixin__actionMap_isSet]: dart.fieldType(core.bool),
      [_downPosition]: dart.fieldType(dart.nullable(ui.Offset)),
      [_focused]: dart.fieldType(core.bool),
      [_hovering]: dart.fieldType(core.bool)
    }));
    return ToggleableStateMixin;
  });
  toggleable.ToggleableStateMixin = toggleable.ToggleableStateMixin$();
  dart.addTypeTests(toggleable.ToggleableStateMixin, _is_ToggleableStateMixin_default);
  var _activeColor = dart.privateName(toggleable, "_activeColor");
  var _inactiveColor = dart.privateName(toggleable, "_inactiveColor");
  var _inactiveReactionColor = dart.privateName(toggleable, "_inactiveReactionColor");
  var _reactionColor = dart.privateName(toggleable, "_reactionColor");
  var _hoverColor = dart.privateName(toggleable, "_hoverColor");
  var _focusColor = dart.privateName(toggleable, "_focusColor");
  var _splashRadius = dart.privateName(toggleable, "_splashRadius");
  var _isFocused = dart.privateName(toggleable, "_isFocused");
  var _isHovered = dart.privateName(toggleable, "_isHovered");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  toggleable.ToggleablePainter = class ToggleablePainter extends change_notifier.ChangeNotifier {
    get position() {
      return dart.nullCheck(this[_position]);
    }
    set position(value) {
      let t10;
      if (value == null) dart.nullFailed(I[0], 347, 34, "value");
      if (dart.equals(value, this[_position])) {
        return;
      }
      t10 = this[_position];
      t10 == null ? null : t10.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_position] = value;
      this.notifyListeners();
    }
    get reaction() {
      return dart.nullCheck(this[_reaction]);
    }
    set reaction(value) {
      let t10;
      if (value == null) dart.nullFailed(I[0], 362, 34, "value");
      if (dart.equals(value, this[_reaction])) {
        return;
      }
      t10 = this[_reaction];
      t10 == null ? null : t10.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reaction] = value;
      this.notifyListeners();
    }
    get reactionFocusFade() {
      return dart.nullCheck(this[_reactionFocusFade]);
    }
    set reactionFocusFade(value) {
      let t10;
      if (value == null) dart.nullFailed(I[0], 377, 43, "value");
      if (dart.equals(value, this[_reactionFocusFade])) {
        return;
      }
      t10 = this[_reactionFocusFade];
      t10 == null ? null : t10.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reactionFocusFade] = value;
      this.notifyListeners();
    }
    get reactionHoverFade() {
      return dart.nullCheck(this[_reactionHoverFade]);
    }
    set reactionHoverFade(value) {
      let t10;
      if (value == null) dart.nullFailed(I[0], 392, 43, "value");
      if (dart.equals(value, this[_reactionHoverFade])) {
        return;
      }
      t10 = this[_reactionHoverFade];
      t10 == null ? null : t10.removeListener(dart.bind(this, 'notifyListeners'));
      value.addListener(dart.bind(this, 'notifyListeners'));
      this[_reactionHoverFade] = value;
      this.notifyListeners();
    }
    get activeColor() {
      return dart.nullCheck(this[_activeColor]);
    }
    set activeColor(value) {
      if (value == null) dart.nullFailed(I[0], 408, 25, "value");
      if (dart.equals(this[_activeColor], value)) {
        return;
      }
      this[_activeColor] = value;
      this.notifyListeners();
    }
    get inactiveColor() {
      return dart.nullCheck(this[_inactiveColor]);
    }
    set inactiveColor(value) {
      if (value == null) dart.nullFailed(I[0], 422, 27, "value");
      if (dart.equals(this[_inactiveColor], value)) {
        return;
      }
      this[_inactiveColor] = value;
      this.notifyListeners();
    }
    get inactiveReactionColor() {
      return dart.nullCheck(this[_inactiveReactionColor]);
    }
    set inactiveReactionColor(value) {
      if (value == null) dart.nullFailed(I[0], 437, 35, "value");
      if (dart.equals(value, this[_inactiveReactionColor])) {
        return;
      }
      this[_inactiveReactionColor] = value;
      this.notifyListeners();
    }
    get reactionColor() {
      return dart.nullCheck(this[_reactionColor]);
    }
    set reactionColor(value) {
      if (value == null) dart.nullFailed(I[0], 452, 27, "value");
      if (dart.equals(value, this[_reactionColor])) {
        return;
      }
      this[_reactionColor] = value;
      this.notifyListeners();
    }
    get hoverColor() {
      return dart.nullCheck(this[_hoverColor]);
    }
    set hoverColor(value) {
      if (value == null) dart.nullFailed(I[0], 466, 24, "value");
      if (dart.equals(value, this[_hoverColor])) {
        return;
      }
      this[_hoverColor] = value;
      this.notifyListeners();
    }
    get focusColor() {
      return dart.nullCheck(this[_focusColor]);
    }
    set focusColor(value) {
      if (value == null) dart.nullFailed(I[0], 480, 24, "value");
      if (dart.equals(value, this[_focusColor])) {
        return;
      }
      this[_focusColor] = value;
      this.notifyListeners();
    }
    get splashRadius() {
      return dart.nullCheck(this[_splashRadius]);
    }
    set splashRadius(value) {
      if (value == null) dart.nullFailed(I[0], 491, 27, "value");
      if (value == this[_splashRadius]) {
        return;
      }
      this[_splashRadius] = value;
      this.notifyListeners();
    }
    get downPosition() {
      return this[_downPosition];
    }
    set downPosition(value) {
      if (dart.equals(value, this[_downPosition])) {
        return;
      }
      this[_downPosition] = value;
      this.notifyListeners();
    }
    get isFocused() {
      return dart.nullCheck(this[_isFocused]);
    }
    set isFocused(value) {
      if (value == this[_isFocused]) {
        return;
      }
      this[_isFocused] = value;
      this.notifyListeners();
    }
    get isHovered() {
      return dart.nullCheck(this[_isHovered]);
    }
    set isHovered(value) {
      if (value == this[_isHovered]) {
        return;
      }
      this[_isHovered] = value;
      this.notifyListeners();
    }
    paintRadialReaction(opts) {
      let t10, t10$;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      if (canvas == null) dart.nullFailed(I[0], 542, 21, "canvas");
      let offset = opts && 'offset' in opts ? opts.offset : C[27] || CT.C27;
      if (offset == null) dart.nullFailed(I[0], 543, 12, "offset");
      let origin = opts && 'origin' in opts ? opts.origin : null;
      if (origin == null) dart.nullFailed(I[0], 544, 21, "origin");
      if (!dart.test(this.reaction.isDismissed) || !dart.test(this.reactionFocusFade.isDismissed) || !dart.test(this.reactionHoverFade.isDismissed)) {
        let reactionPaint = (t10 = ui.Paint.new(), (() => {
          t10.color = dart.nullCheck(ui.Color.lerp(ui.Color.lerp(ui.Color.lerp(this.inactiveReactionColor, this.reactionColor, this.position.value), this.hoverColor, this.reactionHoverFade.value), this.focusColor, this.reactionFocusFade.value));
          return t10;
        })());
        let center = dart.nullCheck(ui.Offset.lerp((t10$ = this.downPosition, t10$ == null ? origin : t10$), origin, this.reaction.value));
        let radialReactionRadiusTween = new (T.TweenOfdouble()).new({begin: 0.0, end: this.splashRadius});
        let reactionRadius = dart.test(this.isFocused) || dart.test(this.isHovered) ? this.splashRadius : radialReactionRadiusTween.evaluate(this.reaction);
        if (dart.notNull(reactionRadius) > 0.0) {
          canvas.drawCircle(center['+'](offset), reactionRadius, reactionPaint);
        }
      }
    }
    dispose() {
      let t10, t10$, t10$0, t10$1;
      t10 = this[_position];
      t10 == null ? null : t10.removeListener(dart.bind(this, 'notifyListeners'));
      t10$ = this[_reaction];
      t10$ == null ? null : t10$.removeListener(dart.bind(this, 'notifyListeners'));
      t10$0 = this[_reactionFocusFade];
      t10$0 == null ? null : t10$0.removeListener(dart.bind(this, 'notifyListeners'));
      t10$1 = this[_reactionHoverFade];
      t10$1 == null ? null : t10$1.removeListener(dart.bind(this, 'notifyListeners'));
      super.dispose();
    }
    shouldRepaint(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[0], 582, 46, "oldDelegate");
      return true;
    }
    hitTest(position) {
      if (position == null) dart.nullFailed(I[0], 585, 24, "position");
      return null;
    }
    get semanticsBuilder() {
      return null;
    }
    shouldRebuildSemantics(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[0], 591, 55, "oldDelegate");
      return false;
    }
  };
  (toggleable.ToggleablePainter.new = function() {
    this[_position] = null;
    this[_reaction] = null;
    this[_reactionFocusFade] = null;
    this[_reactionHoverFade] = null;
    this[_activeColor] = null;
    this[_inactiveColor] = null;
    this[_inactiveReactionColor] = null;
    this[_reactionColor] = null;
    this[_hoverColor] = null;
    this[_focusColor] = null;
    this[_splashRadius] = null;
    this[_downPosition] = null;
    this[_isFocused] = null;
    this[_isHovered] = null;
    toggleable.ToggleablePainter.__proto__.new.call(this);
    ;
  }).prototype = toggleable.ToggleablePainter.prototype;
  dart.addTypeTests(toggleable.ToggleablePainter);
  dart.addTypeCaches(toggleable.ToggleablePainter);
  toggleable.ToggleablePainter[dart.implements] = () => [custom_paint.CustomPainter];
  dart.setMethodSignature(toggleable.ToggleablePainter, () => ({
    __proto__: dart.getMethods(toggleable.ToggleablePainter.__proto__),
    paintRadialReaction: dart.fnType(dart.void, [], {offset: ui.Offset}, {canvas: ui.Canvas, origin: ui.Offset}),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    hitTest: dart.fnType(dart.nullable(core.bool), [ui.Offset]),
    shouldRebuildSemantics: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(toggleable.ToggleablePainter, () => ({
    __proto__: dart.getGetters(toggleable.ToggleablePainter.__proto__),
    position: animation.Animation$(core.double),
    reaction: animation.Animation$(core.double),
    reactionFocusFade: animation.Animation$(core.double),
    reactionHoverFade: animation.Animation$(core.double),
    activeColor: ui.Color,
    inactiveColor: ui.Color,
    inactiveReactionColor: ui.Color,
    reactionColor: ui.Color,
    hoverColor: ui.Color,
    focusColor: ui.Color,
    splashRadius: core.double,
    downPosition: dart.nullable(ui.Offset),
    isFocused: core.bool,
    isHovered: core.bool,
    semanticsBuilder: dart.nullable(dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]))
  }));
  dart.setSetterSignature(toggleable.ToggleablePainter, () => ({
    __proto__: dart.getSetters(toggleable.ToggleablePainter.__proto__),
    position: animation.Animation$(core.double),
    reaction: animation.Animation$(core.double),
    reactionFocusFade: animation.Animation$(core.double),
    reactionHoverFade: animation.Animation$(core.double),
    activeColor: ui.Color,
    inactiveColor: ui.Color,
    inactiveReactionColor: ui.Color,
    reactionColor: ui.Color,
    hoverColor: ui.Color,
    focusColor: ui.Color,
    splashRadius: core.double,
    downPosition: dart.nullable(ui.Offset),
    isFocused: dart.nullable(core.bool),
    isHovered: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(toggleable.ToggleablePainter, I[1]);
  dart.setFieldSignature(toggleable.ToggleablePainter, () => ({
    __proto__: dart.getFields(toggleable.ToggleablePainter.__proto__),
    [_position]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_reaction]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_reactionFocusFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_reactionHoverFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_activeColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_inactiveColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_inactiveReactionColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_reactionColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_hoverColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_focusColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_splashRadius]: dart.fieldType(dart.nullable(core.double)),
    [_downPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [_isFocused]: dart.fieldType(dart.nullable(core.bool)),
    [_isHovered]: dart.fieldType(dart.nullable(core.bool))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(toggleable, {
    /*toggleable._kToggleDuration*/get _kToggleDuration() {
      return C[28] || CT.C28;
    },
    /*toggleable._kReactionFadeDuration*/get _kReactionFadeDuration() {
      return C[29] || CT.C29;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/toggleable.dart", {
    "package:flutter/src/material/toggleable.dart": toggleable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["toggleable.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/flutter/src/material/toggleable.dart.lib.js"}');
  // Exports:
  return {
    src__material__toggleable: toggleable
  };
}));

//# sourceMappingURL=toggleable.dart.lib.js.map
