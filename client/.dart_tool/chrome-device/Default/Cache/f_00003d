define(['dart_sdk', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/path_drawing/src/dash_path.dart', 'packages/flutter/src/rendering/custom_paint.dart'], (function load__packages__dotted_border__dotted_border_dart(dart_sdk, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__path_drawing__src__dash_path$46dart, packages__flutter__src__rendering__custom_paint$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const dash_path = packages__path_drawing__src__dash_path$46dart.src__dash_path;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  var dotted_border = Object.create(dart.library);
  var $toSet = dartx.toSet;
  var $length = dartx.length;
  var $elementAt = dartx.elementAt;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BorderTypeL: () => (T.BorderTypeL = dart.constFn(dart.legacy(dotted_border.BorderType)))(),
    CircularIntervalListOfdouble: () => (T.CircularIntervalListOfdouble = dart.constFn(dash_path.CircularIntervalList$(core.double)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: dotted_border.BorderType.prototype,
        [_name$]: "BorderType.Rect",
        index: 2
      });
    },
    get C2() {
      return C[2] = dart.constList([3, 1], T.doubleL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 2,
        [EdgeInsets_right]: 2,
        [EdgeInsets_top]: 2,
        [EdgeInsets_left]: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name]: "StrokeCap.butt",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 45,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8], T._LocationL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[7] || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dotted_border.dart"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11], T._LocationL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 43,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dotted_border.dart"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 11,
        [_Location_line]: 57,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], T._LocationL());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[13] || CT.C13,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 56,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dotted_border.dart"
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.constList([C[18] || CT.C18], T._LocationL());
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[17] || CT.C17,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 41,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dotted_border.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: dotted_border.BorderType.prototype,
        [_name$]: "BorderType.Circle",
        index: 0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: dotted_border.BorderType.prototype,
        [_name$]: "BorderType.RRect",
        index: 1
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: dotted_border.BorderType.prototype,
        [_name$]: "BorderType.Oval",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.constList([C[19] || CT.C19, C[20] || CT.C20, C[1] || CT.C1, C[21] || CT.C21], T.BorderTypeL());
    }
  }, false);
  var C = Array(23).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dotted_border.dart",
    "package:dotted_border/dotted_border.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/dotted_border-2.0.0/lib/dash_painter.dart"
  ];
  var child$ = dart.privateName(dotted_border, "DottedBorder.child");
  var padding$ = dart.privateName(dotted_border, "DottedBorder.padding");
  var strokeWidth$ = dart.privateName(dotted_border, "DottedBorder.strokeWidth");
  var color$ = dart.privateName(dotted_border, "DottedBorder.color");
  var dashPattern$ = dart.privateName(dotted_border, "DottedBorder.dashPattern");
  var borderType$ = dart.privateName(dotted_border, "DottedBorder.borderType");
  var radius$ = dart.privateName(dotted_border, "DottedBorder.radius");
  var strokeCap$ = dart.privateName(dotted_border, "DottedBorder.strokeCap");
  var customPath$ = dart.privateName(dotted_border, "DottedBorder.customPath");
  var Color_value = dart.privateName(ui, "Color.value");
  var _name$ = dart.privateName(dotted_border, "_name");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var _name = dart.privateName(ui, "_name");
  var _isValidDashPattern = dart.privateName(dotted_border, "_isValidDashPattern");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  dotted_border.DottedBorder = class DottedBorder extends framework.StatelessWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get dashPattern() {
      return this[dashPattern$];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get borderType() {
      return this[borderType$];
    }
    set borderType(value) {
      super.borderType = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get strokeCap() {
      return this[strokeCap$];
    }
    set strokeCap(value) {
      super.strokeCap = value;
    }
    get customPath() {
      return this[customPath$];
    }
    set customPath(value) {
      super.customPath = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[0], 40, 29, "context");
      return new basic.Stack.new({children: T.JSArrayOfWidget().of([new basic.Positioned.fill({child: new basic.CustomPaint.new({painter: new dotted_border._DashPainter.new({strokeWidth: this.strokeWidth, radius: this.radius, color: this.color, borderType: this.borderType, dashPattern: this.dashPattern, customPath: this.customPath, strokeCap: this.strokeCap}), $creationLocationd_0dea112b090073317d4: C[6] || CT.C6}), $creationLocationd_0dea112b090073317d4: C[9] || CT.C9}), new basic.Padding.new({padding: this.padding, child: this.child, $creationLocationd_0dea112b090073317d4: C[12] || CT.C12})]), $creationLocationd_0dea112b090073317d4: C[16] || CT.C16});
    }
    [_isValidDashPattern](dashPattern) {
      let t0;
      let _dashSet = (t0 = dashPattern, t0 == null ? null : t0[$toSet]());
      if (_dashSet == null) return false;
      if (_dashSet[$length] === 1 && _dashSet[$elementAt](0) === 0.0) return false;
      if (_dashSet[$length] === 0) return false;
      return true;
    }
  };
  (dotted_border.DottedBorder.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[0], 26, 19, "child");
    let color = opts && 'color' in opts ? opts.color : C[0] || CT.C0;
    if (color == null) dart.nullFailed(I[0], 27, 10, "color");
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    if (strokeWidth == null) dart.nullFailed(I[0], 28, 10, "strokeWidth");
    let borderType = opts && 'borderType' in opts ? opts.borderType : C[1] || CT.C1;
    if (borderType == null) dart.nullFailed(I[0], 29, 10, "borderType");
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : C[2] || CT.C2;
    if (dashPattern == null) dart.nullFailed(I[0], 30, 10, "dashPattern");
    let padding = opts && 'padding' in opts ? opts.padding : C[3] || CT.C3;
    if (padding == null) dart.nullFailed(I[0], 31, 10, "padding");
    let radius = opts && 'radius' in opts ? opts.radius : C[4] || CT.C4;
    if (radius == null) dart.nullFailed(I[0], 32, 10, "radius");
    let strokeCap = opts && 'strokeCap' in opts ? opts.strokeCap : C[5] || CT.C5;
    if (strokeCap == null) dart.nullFailed(I[0], 33, 10, "strokeCap");
    let customPath = opts && 'customPath' in opts ? opts.customPath : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[child$] = child;
    this[color$] = color;
    this[strokeWidth$] = strokeWidth;
    this[borderType$] = borderType;
    this[dashPattern$] = dashPattern;
    this[padding$] = padding;
    this[radius$] = radius;
    this[strokeCap$] = strokeCap;
    this[customPath$] = customPath;
    dotted_border.DottedBorder.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    if (!dart.test(this[_isValidDashPattern](this.dashPattern))) dart.assertFailed("Invalid dash pattern", I[0], 36, 12, "_isValidDashPattern(dashPattern)");
  }).prototype = dotted_border.DottedBorder.prototype;
  dart.addTypeTests(dotted_border.DottedBorder);
  dart.addTypeCaches(dotted_border.DottedBorder);
  dart.setMethodSignature(dotted_border.DottedBorder, () => ({
    __proto__: dart.getMethods(dotted_border.DottedBorder.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_isValidDashPattern]: dart.fnType(core.bool, [dart.nullable(core.List$(core.double))])
  }));
  dart.setLibraryUri(dotted_border.DottedBorder, I[1]);
  dart.setFieldSignature(dotted_border.DottedBorder, () => ({
    __proto__: dart.getFields(dotted_border.DottedBorder.__proto__),
    child: dart.finalFieldType(framework.Widget),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    strokeWidth: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    dashPattern: dart.finalFieldType(core.List$(core.double)),
    borderType: dart.finalFieldType(dotted_border.BorderType),
    radius: dart.finalFieldType(ui.Radius),
    strokeCap: dart.finalFieldType(ui.StrokeCap),
    customPath: dart.finalFieldType(dart.nullable(dart.fnType(ui.Path, [ui.Size])))
  }));
  dotted_border.BorderType = class BorderType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (dotted_border.BorderType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 77, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 77, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = dotted_border.BorderType.prototype;
  dart.addTypeTests(dotted_border.BorderType);
  dart.addTypeCaches(dotted_border.BorderType);
  dart.setLibraryUri(dotted_border.BorderType, I[1]);
  dart.setFieldSignature(dotted_border.BorderType, () => ({
    __proto__: dart.getFields(dotted_border.BorderType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dotted_border.BorderType, ['toString']);
  dotted_border.BorderType.Circle = C[19] || CT.C19;
  dotted_border.BorderType.RRect = C[20] || CT.C20;
  dotted_border.BorderType.Rect = C[1] || CT.C1;
  dotted_border.BorderType.Oval = C[21] || CT.C21;
  dotted_border.BorderType.values = C[22] || CT.C22;
  var _getPath = dart.privateName(dotted_border, "_getPath");
  var _getCirclePath = dart.privateName(dotted_border, "_getCirclePath");
  var _getRRectPath = dart.privateName(dotted_border, "_getRRectPath");
  var _getRectPath = dart.privateName(dotted_border, "_getRectPath");
  var _getOvalPath = dart.privateName(dotted_border, "_getOvalPath");
  dotted_border._DashPainter = class _DashPainter extends custom_paint.CustomPainter {
    paint(canvas, size) {
      let t0;
      if (canvas == null) dart.nullFailed(I[2], 27, 21, "canvas");
      if (size == null) dart.nullFailed(I[2], 27, 34, "size");
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.strokeWidth = this.strokeWidth;
        t0.color = this.color;
        t0.strokeCap = this.strokeCap;
        t0.style = ui.PaintingStyle.stroke;
        return t0;
      })());
      let _path = null;
      if (this.customPath != null) {
        _path = dash_path.dashPath(dart.nullCheck(this.customPath)(size), {dashArray: new (T.CircularIntervalListOfdouble()).new(this.dashPattern)});
      } else {
        _path = this[_getPath](size);
      }
      canvas.drawPath(_path, paint);
    }
    [_getPath](size) {
      if (size == null) dart.nullFailed(I[2], 48, 22, "size");
      let path = null;
      switch (this.borderType) {
        case C[19] || CT.C19:
        {
          path = this[_getCirclePath](size);
          break;
        }
        case C[20] || CT.C20:
        {
          path = this[_getRRectPath](size, this.radius);
          break;
        }
        case C[1] || CT.C1:
        {
          path = this[_getRectPath](size);
          break;
        }
        case C[21] || CT.C21:
        {
          path = this[_getOvalPath](size);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      return dash_path.dashPath(path, {dashArray: new (T.CircularIntervalListOfdouble()).new(this.dashPattern)});
    }
    [_getCirclePath](size) {
      let t0;
      if (size == null) dart.nullFailed(I[2], 69, 28, "size");
      let w = size.width;
      let h = size.height;
      let s = size.shortestSide;
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTWH(dart.notNull(w) > dart.notNull(s) ? (dart.notNull(w) - dart.notNull(s)) / 2 : 0.0, dart.notNull(h) > dart.notNull(s) ? dart.notNull(h) - dart.notNull(s) / 2 : 0.0, s, s), new ui.Radius.circular(dart.notNull(s) / 2)));
        return t0;
      })();
    }
    [_getRRectPath](size, radius) {
      let t0;
      if (size == null) dart.nullFailed(I[2], 89, 27, "size");
      if (radius == null) dart.nullFailed(I[2], 89, 40, "radius");
      t0 = ui.Path.new();
      return (() => {
        t0.addRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height), radius));
        return t0;
      })();
    }
    [_getRectPath](size) {
      let t0;
      if (size == null) dart.nullFailed(I[2], 105, 26, "size");
      t0 = ui.Path.new();
      return (() => {
        t0.addRect(new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height));
        return t0;
      })();
    }
    [_getOvalPath](size) {
      let t0;
      if (size == null) dart.nullFailed(I[2], 118, 26, "size");
      t0 = ui.Path.new();
      return (() => {
        t0.addOval(new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height));
        return t0;
      })();
    }
    shouldRepaint(oldDelegate) {
      dotted_border._DashPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[2], 131, 35, "oldDelegate");
      return oldDelegate.strokeWidth != this.strokeWidth || !dart.equals(oldDelegate.color, this.color) || !dart.equals(oldDelegate.dashPattern, this.dashPattern) || oldDelegate.borderType != this.borderType;
    }
  };
  (dotted_border._DashPainter.new = function(opts) {
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 2;
    if (strokeWidth == null) dart.nullFailed(I[2], 15, 10, "strokeWidth");
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : C[2] || CT.C2;
    if (dashPattern == null) dart.nullFailed(I[2], 16, 10, "dashPattern");
    let color = opts && 'color' in opts ? opts.color : C[0] || CT.C0;
    if (color == null) dart.nullFailed(I[2], 17, 10, "color");
    let borderType = opts && 'borderType' in opts ? opts.borderType : C[1] || CT.C1;
    if (borderType == null) dart.nullFailed(I[2], 18, 10, "borderType");
    let radius = opts && 'radius' in opts ? opts.radius : C[4] || CT.C4;
    if (radius == null) dart.nullFailed(I[2], 19, 10, "radius");
    let strokeCap = opts && 'strokeCap' in opts ? opts.strokeCap : C[5] || CT.C5;
    if (strokeCap == null) dart.nullFailed(I[2], 20, 10, "strokeCap");
    let customPath = opts && 'customPath' in opts ? opts.customPath : null;
    this.strokeWidth = strokeWidth;
    this.dashPattern = dashPattern;
    this.color = color;
    this.borderType = borderType;
    this.radius = radius;
    this.strokeCap = strokeCap;
    this.customPath = customPath;
    dotted_border._DashPainter.__proto__.new.call(this);
    if (!dart.test(this.dashPattern[$isNotEmpty])) dart.assertFailed("Dash Pattern cannot be empty", I[2], 23, 12, "dashPattern.isNotEmpty");
  }).prototype = dotted_border._DashPainter.prototype;
  dart.addTypeTests(dotted_border._DashPainter);
  dart.addTypeCaches(dotted_border._DashPainter);
  dart.setMethodSignature(dotted_border._DashPainter, () => ({
    __proto__: dart.getMethods(dotted_border._DashPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_getPath]: dart.fnType(ui.Path, [ui.Size]),
    [_getCirclePath]: dart.fnType(ui.Path, [ui.Size]),
    [_getRRectPath]: dart.fnType(ui.Path, [ui.Size, ui.Radius]),
    [_getRectPath]: dart.fnType(ui.Path, [ui.Size]),
    [_getOvalPath]: dart.fnType(ui.Path, [ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dotted_border._DashPainter, I[1]);
  dart.setFieldSignature(dotted_border._DashPainter, () => ({
    __proto__: dart.getFields(dotted_border._DashPainter.__proto__),
    strokeWidth: dart.finalFieldType(core.double),
    dashPattern: dart.finalFieldType(core.List$(core.double)),
    color: dart.finalFieldType(ui.Color),
    borderType: dart.finalFieldType(dotted_border.BorderType),
    radius: dart.finalFieldType(ui.Radius),
    strokeCap: dart.finalFieldType(ui.StrokeCap),
    customPath: dart.finalFieldType(dart.nullable(dart.fnType(ui.Path, [ui.Size])))
  }));
  dart.trackLibraries("packages/dotted_border/dotted_border.dart", {
    "package:dotted_border/dotted_border.dart": dotted_border
  }, {
    "package:dotted_border/dotted_border.dart": ["dash_painter.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["dotted_border.dart","dash_painter.dart"],"names":[],"mappings":"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","file":"../../../../../../../../D:/packages/dotted_border/dotted_border.dart.lib.js"}');
  // Exports:
  return {
    dotted_border: dotted_border
  };
}));

//# sourceMappingURL=dotted_border.dart.lib.js.map
