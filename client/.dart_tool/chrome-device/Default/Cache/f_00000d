define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/file_picker/src/platform_file.dart', 'packages/file_picker/src/file_picker_result.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart'], (function load__packages__file_picker__src__file_picker_io_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__debug$46dart, packages__file_picker__src__platform_file$46dart, packages__file_picker__src__file_picker_result$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const platform_file = packages__file_picker__src__platform_file$46dart.src__platform_file;
  const file_picker_result = packages__file_picker__src__file_picker_result$46dart.src__file_picker_result;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  var file_picker_io = Object.create(dart.library);
  var file_picker = Object.create(dart.library);
  var file_picker$ = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $_get = dartx._get;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    dynamicToNever: () => (T.dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T.ObjectN())))(),
    JSArrayOfPlatformFile: () => (T.JSArrayOfPlatformFile = dart.constFn(_interceptors.JSArray$(platform_file.PlatformFile)))(),
    FilePickerResultN: () => (T.FilePickerResultN = dart.constFn(dart.nullable(file_picker_result.FilePickerResult)))(),
    FileTypeL: () => (T.FileTypeL = dart.constFn(dart.legacy(file_picker.FileType)))(),
    FilePickerStatusL: () => (T.FilePickerStatusL = dart.constFn(dart.legacy(file_picker.FilePickerStatus)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.any",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_channel.EventChannel.prototype,
        [EventChannel__binaryMessenger]: null,
        [EventChannel_codec]: C[2] || CT.C2,
        [EventChannel_name]: "miguelruivo.flutter.plugins.filepickerevent"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.media",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.image",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.video",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.audio",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: file_picker.FileType.prototype,
        [_name$]: "FileType.custom",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.constList([C[0] || CT.C0, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], T.FileTypeL());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: file_picker.FilePickerStatus.prototype,
        [_name$]: "FilePickerStatus.picking",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: file_picker.FilePickerStatus.prototype,
        [_name$]: "FilePickerStatus.done",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], T.FilePickerStatusL());
    }
  }, false);
  var C = Array(14).fill(void 0);
  var I = [
    "file:///C:/Users/Ejas/Desktop/App_files/flutter/.pub-cache/hosted/pub.dartlang.org/file_picker-3.0.3/lib/src/file_picker_io.dart",
    "file:///C:/Users/Ejas/Desktop/App_files/flutter/.pub-cache/hosted/pub.dartlang.org/file_picker-3.0.3/lib/src/file_picker.dart",
    "package:file_picker/src/file_picker.dart",
    "package:file_picker/src/file_picker_io.dart"
  ];
  var _name$ = dart.privateName(file_picker, "_name");
  var _getPath = dart.privateName(file_picker_io, "_getPath");
  file_picker.FilePicker = class FilePicker extends plugin_platform_interface.PlatformInterface {
    static get platform() {
      return file_picker.FilePicker._instance;
    }
    static set platform(instance) {
      if (instance == null) dart.nullFailed(I[1], 39, 34, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, file_picker.FilePicker._token);
      file_picker.FilePicker._instance = instance;
    }
    pickFiles(opts) {
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      if (type == null) dart.nullFailed(I[1], 71, 14, "type");
      let allowedExtensions = opts && 'allowedExtensions' in opts ? opts.allowedExtensions : null;
      let onFileLoading = opts && 'onFileLoading' in opts ? opts.onFileLoading : null;
      let allowCompression = opts && 'allowCompression' in opts ? opts.allowCompression : true;
      if (allowCompression == null) dart.nullFailed(I[1], 74, 10, "allowCompression");
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      if (allowMultiple == null) dart.nullFailed(I[1], 75, 10, "allowMultiple");
      let withData = opts && 'withData' in opts ? opts.withData : false;
      if (withData == null) dart.nullFailed(I[1], 76, 10, "withData");
      let withReadStream = opts && 'withReadStream' in opts ? opts.withReadStream : false;
      if (withReadStream == null) dart.nullFailed(I[1], 77, 10, "withReadStream");
      return async.async(T.FilePickerResultN(), function* pickFiles() {
        return dart.throw(new core.UnimplementedError.new("pickFiles() has not been implemented."));
      });
    }
    clearTemporaryFiles() {
      return async.async(T.boolN(), function* clearTemporaryFiles() {
        return dart.throw(new core.UnimplementedError.new("clearTemporaryFiles() has not been implemented."));
      });
    }
    getDirectoryPath() {
      return async.async(T.StringN(), function* getDirectoryPath() {
        return dart.throw(new core.UnimplementedError.new("getDirectoryPath() has not been implemented."));
      });
    }
  };
  (file_picker.FilePicker.new = function() {
    file_picker.FilePicker.__proto__.new.call(this, {token: file_picker.FilePicker._token});
    ;
  }).prototype = file_picker.FilePicker.prototype;
  dart.addTypeTests(file_picker.FilePicker);
  dart.addTypeCaches(file_picker.FilePicker);
  dart.setMethodSignature(file_picker.FilePicker, () => ({
    __proto__: dart.getMethods(file_picker.FilePicker.__proto__),
    pickFiles: dart.fnType(async.Future$(dart.nullable(file_picker_result.FilePickerResult)), [], {allowCompression: core.bool, allowMultiple: core.bool, allowedExtensions: dart.nullable(core.List$(core.String)), onFileLoading: dart.nullable(dart.fnType(dart.dynamic, [file_picker.FilePickerStatus])), type: file_picker.FileType, withData: core.bool, withReadStream: core.bool}, {}),
    clearTemporaryFiles: dart.fnType(async.Future$(dart.nullable(core.bool)), []),
    getDirectoryPath: dart.fnType(async.Future$(dart.nullable(core.String)), [])
  }));
  dart.setLibraryUri(file_picker.FilePicker, I[2]);
  dart.defineLazy(file_picker.FilePicker, {
    /*file_picker.FilePicker._token*/get _token() {
      return new core.Object.new();
    },
    /*file_picker.FilePicker._instance*/get _instance() {
      return new file_picker_io.FilePickerIO.new();
    },
    set _instance(_) {}
  }, false);
  file_picker_io.FilePickerIO = class FilePickerIO extends file_picker.FilePicker {
    pickFiles(opts) {
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      if (type == null) dart.nullFailed(I[0], 28, 14, "type");
      let allowedExtensions = opts && 'allowedExtensions' in opts ? opts.allowedExtensions : null;
      let onFileLoading = opts && 'onFileLoading' in opts ? opts.onFileLoading : null;
      let allowCompression = opts && 'allowCompression' in opts ? opts.allowCompression : true;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      if (allowMultiple == null) dart.nullFailed(I[0], 32, 10, "allowMultiple");
      let withData = opts && 'withData' in opts ? opts.withData : false;
      let withReadStream = opts && 'withReadStream' in opts ? opts.withReadStream : false;
      return this[_getPath](type, allowMultiple, allowCompression, allowedExtensions, onFileLoading, withData, withReadStream);
    }
    clearTemporaryFiles() {
      return async.async(T.boolN(), function* clearTemporaryFiles() {
        return file_picker_io._channel.invokeMethod(core.bool, "clear");
      });
    }
    getDirectoryPath() {
      return async.async(T.StringN(), function* getDirectoryPath() {
        try {
          return yield file_picker_io._channel.invokeMethod(core.String, "dir", new _js_helper.LinkedMap.new());
        } catch (e) {
          let ex = dart.getThrown(e);
          if (message_codec.PlatformException.is(ex)) {
            if (ex.code === "unknown_path") {
              core.print("[" + "MethodChannelFilePicker" + "] Could not resolve directory path. Maybe it's a protected one or unsupported (such as Downloads folder). If you are on Android, make sure that you are on SDK 21 or above.");
            }
          } else
            throw e;
        }
        return null;
      });
    }
    [_getPath](fileType, allowMultipleSelection, allowCompression, allowedExtensions, onFileLoading, withData, withReadStream) {
      if (fileType == null) dart.nullFailed(I[0], 64, 14, "fileType");
      if (allowMultipleSelection == null) dart.nullFailed(I[0], 65, 10, "allowMultipleSelection");
      return async.async(T.FilePickerResultN(), function* _getPath() {
        let t1, t1$, t1$0;
        let type = diagnostics.describeEnum(fileType);
        if (type !== "custom" && dart.test((t1$ = (t1 = allowedExtensions, t1 == null ? null : t1[$isNotEmpty]), t1$ == null ? false : t1$))) {
          dart.throw(core.Exception.new("You are setting a type [" + dart.str(fileType) + "]. Custom extension filters are only allowed with FileType.custom, please change it or remove filters."));
        }
        try {
          t1$0 = file_picker_io.FilePickerIO._eventSubscription;
          t1$0 == null ? null : t1$0.cancel();
          if (onFileLoading != null) {
            file_picker_io.FilePickerIO._eventSubscription = file_picker_io._eventChannel.receiveBroadcastStream().listen(dart.fn(data => onFileLoading(dart.test(core.bool.as(data)) ? file_picker.FilePickerStatus.picking : file_picker.FilePickerStatus.done), T.dynamicTovoid()), {onError: dart.fn(error => dart.throw(core.Exception.new(error)), T.dynamicToNever())});
          }
          let result = (yield file_picker_io._channel.invokeListMethod(core.Map, type, new (T.IdentityMapOfString$ObjectN()).from(["allowMultipleSelection", allowMultipleSelection, "allowedExtensions", allowedExtensions, "allowCompression", allowCompression, "withData", withData])));
          if (result == null) {
            return null;
          }
          let platformFiles = T.JSArrayOfPlatformFile().of([]);
          for (let platformFileMap of result) {
            platformFiles[$add](new platform_file.PlatformFile.fromMap(platformFileMap, {readStream: dart.nullCheck(withReadStream) ? io.File.new(core.String.as(platformFileMap[$_get]("path"))).openRead() : null}));
          }
          return new file_picker_result.FilePickerResult.new(platformFiles);
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (message_codec.PlatformException.is(ex)) {
            let e = ex;
            core.print("[" + "MethodChannelFilePicker" + "] Platform exception: " + dart.str(e));
            dart.rethrow(e$);
          } else if (core.Object.is(ex)) {
            let e = ex;
            core.print("[" + "MethodChannelFilePicker" + "] Unsupported operation. Method not found. The exception thrown was: " + dart.str(e));
            dart.rethrow(e$);
          } else
            throw e$;
        }
      });
    }
  };
  (file_picker_io.FilePickerIO.new = function() {
    file_picker_io.FilePickerIO.__proto__.new.call(this);
    ;
  }).prototype = file_picker_io.FilePickerIO.prototype;
  dart.addTypeTests(file_picker_io.FilePickerIO);
  dart.addTypeCaches(file_picker_io.FilePickerIO);
  dart.setMethodSignature(file_picker_io.FilePickerIO, () => ({
    __proto__: dart.getMethods(file_picker_io.FilePickerIO.__proto__),
    pickFiles: dart.fnType(async.Future$(dart.nullable(file_picker_result.FilePickerResult)), [], {allowCompression: dart.nullable(core.bool), allowMultiple: core.bool, allowedExtensions: dart.nullable(core.List$(core.String)), onFileLoading: dart.nullable(dart.fnType(dart.dynamic, [file_picker.FilePickerStatus])), type: file_picker.FileType, withData: dart.nullable(core.bool), withReadStream: dart.nullable(core.bool)}, {}),
    [_getPath]: dart.fnType(async.Future$(dart.nullable(file_picker_result.FilePickerResult)), [file_picker.FileType, core.bool, dart.nullable(core.bool), dart.nullable(core.List$(core.String)), dart.nullable(dart.fnType(dart.dynamic, [file_picker.FilePickerStatus])), dart.nullable(core.bool), dart.nullable(core.bool)])
  }));
  dart.setLibraryUri(file_picker_io.FilePickerIO, I[3]);
  dart.defineLazy(file_picker_io.FilePickerIO, {
    /*file_picker_io.FilePickerIO._tag*/get _tag() {
      return "MethodChannelFilePicker";
    },
    /*file_picker_io.FilePickerIO._eventSubscription*/get _eventSubscription() {
      return null;
    },
    set _eventSubscription(_) {}
  }, false);
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var EventChannel__binaryMessenger = dart.privateName(platform_channel, "EventChannel._binaryMessenger");
  var EventChannel_codec = dart.privateName(platform_channel, "EventChannel.codec");
  var EventChannel_name = dart.privateName(platform_channel, "EventChannel.name");
  dart.defineLazy(file_picker_io, {
    /*file_picker_io._channel*/get _channel() {
      return new platform_channel.MethodChannel.new("miguelruivo.flutter.plugins.filepicker", dart.test(io.Platform.isLinux) || dart.test(io.Platform.isWindows) || dart.test(io.Platform.isMacOS) ? C[1] || CT.C1 : C[2] || CT.C2);
    },
    /*file_picker_io._eventChannel*/get _eventChannel() {
      return C[4] || CT.C4;
    }
  }, false);
  file_picker.FileType = class FileType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (file_picker.FileType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[1], 9, 6, "index");
    if (_name == null) dart.nullFailed(I[1], 9, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = file_picker.FileType.prototype;
  dart.addTypeTests(file_picker.FileType);
  dart.addTypeCaches(file_picker.FileType);
  dart.setLibraryUri(file_picker.FileType, I[2]);
  dart.setFieldSignature(file_picker.FileType, () => ({
    __proto__: dart.getFields(file_picker.FileType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(file_picker.FileType, ['toString']);
  file_picker.FileType.any = C[0] || CT.C0;
  file_picker.FileType.media = C[5] || CT.C5;
  file_picker.FileType.image = C[6] || CT.C6;
  file_picker.FileType.video = C[7] || CT.C7;
  file_picker.FileType.audio = C[8] || CT.C8;
  file_picker.FileType.custom = C[9] || CT.C9;
  file_picker.FileType.values = C[10] || CT.C10;
  file_picker.FilePickerStatus = class FilePickerStatus extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (file_picker.FilePickerStatus.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[1], 18, 6, "index");
    if (_name == null) dart.nullFailed(I[1], 18, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = file_picker.FilePickerStatus.prototype;
  dart.addTypeTests(file_picker.FilePickerStatus);
  dart.addTypeCaches(file_picker.FilePickerStatus);
  dart.setLibraryUri(file_picker.FilePickerStatus, I[2]);
  dart.setFieldSignature(file_picker.FilePickerStatus, () => ({
    __proto__: dart.getFields(file_picker.FilePickerStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(file_picker.FilePickerStatus, ['toString']);
  file_picker.FilePickerStatus.picking = C[11] || CT.C11;
  file_picker.FilePickerStatus.done = C[12] || CT.C12;
  file_picker.FilePickerStatus.values = C[13] || CT.C13;
  dart.trackLibraries("packages/file_picker/src/file_picker_io.dart", {
    "package:file_picker/src/file_picker_io.dart": file_picker_io,
    "package:file_picker/src/file_picker.dart": file_picker,
    "package:file_picker/file_picker.dart": file_picker$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["file_picker.dart","file_picker_io.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCoC;IAAS;;UAEZ;AACkB,MAA7B,wDAAY,QAAQ,EAAE;AACpB,MAApB,mCAAY,QAAQ;IACtB;;UA6BW;;UACK;UACc;UACvB;;UACA;;UACA;;UACA;;AAP4B;AAS/B,0BAAM,gCAAmB;MAAwC;;;AASpC;AAAY,0BAAM,gCAC/C;MAAkD;;;AAQtB;AAC5B,0BAAM,gCAAmB;MAA+C;;;;AAnE7D,4DAAa;;EAAO;;;;;;;;;;;MAEf,6BAAM;YAAG;;MAEX,gCAAS;YAAG;;;;;;UCPnB;;UACK;UACc;UACtB;UACD;;UACC;UACA;AAEJ,4BACE,IAAI,EACJ,aAAa,EACb,gBAAgB,EAChB,iBAAiB,EACjB,aAAa,EACb,QAAQ,EACR,cAAc;IACf;;AAG4B;AAC7B,cAAA,AAAS,iDAAmB;MAAQ;;;AAGR;AAC9B;AACE,gBAAO,OAAM,AAAS,kDAAa,OAAO;;cACd;AAA5B;AACA,gBAAI,AAAG,AAAK,EAAN,UAAS;AAE4K,cADzL,WACI,AAAoL,kCAA7K;;;;;AAGf,cAAO;MACT;;eAGW,UACJ,wBACC,kBACQ,mBACc,eACtB,UACA;UANG;UACJ;AAF2B;;AASnB,mBAAO,yBAAa,QAAQ;AACzC,YAAI,IAAI,KAAI,uBAA2C,YAA9B,iBAAiB,eAAjB,OAAmB,kBAAnB,cAAiC;AAEsF,UAD9I,WAAM,mBACF,AAAyI,sCAA/G,QAAQ;;AAExC;AAC8B,iBAA5B;gCAAoB;AACpB,cAAI,aAAa;AAMV,YALL,iDAAqB,AAAc,AAAyB,6DACtD,QAAC,QAAS,AAAa,aAAA,WAAO,aAAL,IAAI,KACN,uCACA,kEACd,QAAC,SAAU,WAAM,mBAAU,KAAK;;AAIhC,wBAAS,MAAM,AAAS,mDAAiB,IAAI,EAAE,4CAC9D,0BAA0B,sBAAsB,EAChD,qBAAqB,iBAAiB,EACtC,oBAAoB,gBAAgB,EACpC,YAAY,QAAQ;AAGtB,cAAI,AAAO,MAAD;AACR,kBAAO;;AAGgB,8BAA8B;AAEvD,mBAAe,kBAAmB,OAAM;AAQrC,YAPD,AAAc,aAAD,OACE,uCACX,eAAe,eACW,eAAd,cAAc,IACpB,AAA8B,2BAAzB,AAAe,eAAA,QAAC,uBACrB;;AAKZ,gBAAO,6CAAiB,aAAa;;;AACrC;gBAA4B;AACW,YAAvC,WAAM,AAAgC,kCAAzB,oCAAuB,CAAC;AAC9B,YAAP;gBACA;gBAAO;AAE6E,YADpF,WACI,AAA+E,kCAAxE,mFAAsE,CAAC;AAC3E,YAAP;;;;MAEJ;;;;;;EACF;;;;;;;;;;MAnGsB,gCAAI;;;MACG,8CAAkB;;;;;;;;;;MAb3B,uBAAQ;YAAG,wCAC7B,0CACuC,UAA9B,kCAAoB,oCAAsB;;MAKlC,4BAAa;;;;;;;IDFhC;;;QAPK;;;;;EAOL;;;;;;;;;;;;;;;;;;;;IAKA;;;QAHK;;;;;EAGL","file":"../../../../../../../../../../../packages/file_picker/src/file_picker_io.dart.lib.js"}');
  // Exports:
  return {
    src__file_picker_io: file_picker_io,
    src__file_picker: file_picker,
    file_picker: file_picker$
  };
}));

//# sourceMappingURL=file_picker_io.dart.lib.js.map
